// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tinkerbell/tink/protos/hardware (interfaces: HardwareServiceClient)

// Package mock_hardware is a generated GoMock package.
package mock_hardware

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	hardware "github.com/tinkerbell/tink/protos/hardware"
	grpc "google.golang.org/grpc"
)

// MockHardwareServiceClient is a mock of HardwareServiceClient interface
type MockHardwareServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockHardwareServiceClientMockRecorder
}

// MockHardwareServiceClientMockRecorder is the mock recorder for MockHardwareServiceClient
type MockHardwareServiceClientMockRecorder struct {
	mock *MockHardwareServiceClient
}

// NewMockHardwareServiceClient creates a new mock instance
func NewMockHardwareServiceClient(ctrl *gomock.Controller) *MockHardwareServiceClient {
	mock := &MockHardwareServiceClient{ctrl: ctrl}
	mock.recorder = &MockHardwareServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHardwareServiceClient) EXPECT() *MockHardwareServiceClientMockRecorder {
	return m.recorder
}

// All mocks base method
func (m *MockHardwareServiceClient) All(arg0 context.Context, arg1 *hardware.Empty, arg2 ...grpc.CallOption) (hardware.HardwareService_AllClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "All", varargs...)
	ret0, _ := ret[0].(hardware.HardwareService_AllClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All
func (mr *MockHardwareServiceClientMockRecorder) All(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockHardwareServiceClient)(nil).All), varargs...)
}

// ByID mocks base method
func (m *MockHardwareServiceClient) ByID(arg0 context.Context, arg1 *hardware.GetRequest, arg2 ...grpc.CallOption) (*hardware.Hardware, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ByID", varargs...)
	ret0, _ := ret[0].(*hardware.Hardware)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByID indicates an expected call of ByID
func (mr *MockHardwareServiceClientMockRecorder) ByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByID", reflect.TypeOf((*MockHardwareServiceClient)(nil).ByID), varargs...)
}

// ByIP mocks base method
func (m *MockHardwareServiceClient) ByIP(arg0 context.Context, arg1 *hardware.GetRequest, arg2 ...grpc.CallOption) (*hardware.Hardware, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ByIP", varargs...)
	ret0, _ := ret[0].(*hardware.Hardware)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByIP indicates an expected call of ByIP
func (mr *MockHardwareServiceClientMockRecorder) ByIP(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByIP", reflect.TypeOf((*MockHardwareServiceClient)(nil).ByIP), varargs...)
}

// ByMAC mocks base method
func (m *MockHardwareServiceClient) ByMAC(arg0 context.Context, arg1 *hardware.GetRequest, arg2 ...grpc.CallOption) (*hardware.Hardware, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ByMAC", varargs...)
	ret0, _ := ret[0].(*hardware.Hardware)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByMAC indicates an expected call of ByMAC
func (mr *MockHardwareServiceClientMockRecorder) ByMAC(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByMAC", reflect.TypeOf((*MockHardwareServiceClient)(nil).ByMAC), varargs...)
}

// Delete mocks base method
func (m *MockHardwareServiceClient) Delete(arg0 context.Context, arg1 *hardware.DeleteRequest, arg2 ...grpc.CallOption) (*hardware.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*hardware.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockHardwareServiceClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHardwareServiceClient)(nil).Delete), varargs...)
}

// Push mocks base method
func (m *MockHardwareServiceClient) Push(arg0 context.Context, arg1 *hardware.PushRequest, arg2 ...grpc.CallOption) (*hardware.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(*hardware.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push
func (mr *MockHardwareServiceClientMockRecorder) Push(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockHardwareServiceClient)(nil).Push), varargs...)
}

// Watch mocks base method
func (m *MockHardwareServiceClient) Watch(arg0 context.Context, arg1 *hardware.GetRequest, arg2 ...grpc.CallOption) (hardware.HardwareService_WatchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(hardware.HardwareService_WatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockHardwareServiceClientMockRecorder) Watch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockHardwareServiceClient)(nil).Watch), varargs...)
}
