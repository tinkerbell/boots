name: Test and Build for Each Push and PR
on:
  push:
  pull_request:
env:
  platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64
  QUAY_REPO: quay.io/tinkerbell/boots
jobs:
  validation:
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
    steps:
      - name: Setup Dynamic Env
        run: |
          echo "MAKEFLAGS=-j$(nproc)" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixpkgs-unstable

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: "v0.4.1"

      - name: Non Go formatters and linters
        run: ./.github/workflows/ci-non-go.sh

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.15.5"

      - name: generate bindata.go
        run: nix-shell --run 'make ipxe/bindata.go'

      - name: goimports
        run: go get golang.org/x/tools/cmd/goimports && goimports -d . | (! grep .)

      - name: go vet
        run: go vet ./...

      - name: golangci-lint brought to you by Nix
        run: nix-shell --run 'GOROOT= golangci-lint run -v -D errcheck'

      - name: go test
        run: go test -v ./... -gcflags=-l

      - name: go test coverage
        run: go test -coverprofile=coverage.txt ./... -gcflags=-l

      - name: upload codecov
        run: bash <(curl -s https://codecov.io/bash)

      - name: compile binaries
        run: nix-shell --run 'make crosscompile'

      - name: Build Images
        uses: docker/build-push-action@v2
        with:
          tags: ci-image-build:sha-${{github.sha}}
          cache-from: type=registry,ref=${QUAY_REPO}:latest
          platforms: ${{env.platforms}}

      - name: Export Images
        run: |
          mkdir images
          for platform in ${platforms//,/ }; do
            tag=sha-${{github.sha}}-${platform//'/'/-}
            docker buildx build --tag "ci-image-build:$tag" --platform=$platform --output type=docker,dest=images/$tag.tar .
          done

      - name: Upload Images As Artifact
        uses: actions/upload-artifact@v2
        with:
          name: images
          path: images
